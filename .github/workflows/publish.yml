name: Create Release Builds

on:
  push:
    tags:
      - "v*" # matches v1.0.1, v1.2, v2, etc

env:
  CARGO_TERM_COLOR: always
  
jobs:
  once:
    name: Create GitHub release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create a release
        id: create_release
        uses: comnoco/create-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
  build:
    strategy:
      matrix:
        platform: [{name: "x86_64", suffix: ""}, {name: "arm64", suffix: ".arm64"}, {name: "armhf", suffix: ".armhf"}]
    name: Create a release build, tag and upload binary
    needs: once
    runs-on: ubuntu-latest
    steps:
    - name: Build docker image for one stage
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile${{ matrix.platform.suffix }}
        target: builder
        tags:
          tgtg:latest
    - name: Extract binaries from the docker
      run: |
        mkdir -p ${{ github.workspace }}/bin
        docker cp $(docker create tgtg:latest):/app/bin/. ${{ github.workspace }}/bin
    - name: Make Zip(s)
      run: |
        7z a -tzip ${{ github.workspace }}/bin/app/tgtg-discord-bot.zip ${{ github.workspace }}/bin/tgtg-discord-bot
    - name: Upload Release Asset Client
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.once.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/bin/tgtg-discord-bot.zip 
        asset_name: tgtg-discord-bot-linux-${{ matrix.platform.name }}.zip 
        asset_content_type: application/octet-stream